{"version":3,"sources":["pathfinder/Node/node.jsx","algorithms/dijkstra.js","pathfinder/pathfinder.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isBarrier","onMouseDown","onMouseEnter","onMouseUp","onMouseClick","row","extraClassName","id","className","onClick","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","allNodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","node1","node2","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Pathfinder","state","mouseIsPressed","isSelectingStart","isSelectingEnd","isSelectingBarrier","startNodeRow","startNodeCol","endNodeRow","endNodeCol","getInitialGrid","setState","newGrid","getNewGridWithBarrierToggled","getNewGridWithStartNode","getNewGridWithEndNode","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","nodesInShortestPath","currNode","unshift","getNodesInShortestPath","animateDijkstra","slice","oldNode","newNode","class","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","visualizeDijkstra","toggleSelectingStart","toggleSelectingEnd","clearGrid","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","handleNodeClicked","currentRow","createNode","oldRow","oldCol","oldStart","cleanOldStart","oldFinish","cleanOldFinish","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.094df725.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './node.css';\n\nexport default class Node extends Component {\n\trender() {\n\t\tconst {\n\t\t\tcol,\n\t\t\tisFinish,\n\t\t\tisStart,\n\t\t\tisBarrier,\n\t\t\tonMouseDown,\n\t\t\tonMouseEnter,\n\t\t\tonMouseUp,\n\t\t\tonMouseClick,\n\t\t\trow,\n\t\t} = this.props;\n\n\t\tconst extraClassName = isFinish\n\t\t? 'node-finish'\n\t\t: isStart\n\t\t? 'node-start'\n\t\t: isBarrier\n\t\t? 'node-Barrier'\n\t\t: '';\n\n\t\treturn (\n\t\t<div\n\t\t\tid={`node-${row}-${col}`}\n\t\t\tclassName={`node ${extraClassName}`}\n\t\t\tonMouseDown = {() => onMouseDown(row, col)}\n\t\t\tonMouseEnter = {() => onMouseEnter(row, col)}\n\t\t\tonMouseUp = {() => onMouseUp()}\n\t\t\tonClick = {() => onMouseClick(row, col)}\n\t\t/>\n\t\t);\n\t}\n}","export function dijkstra(grid, startNode, finishNode) \n{\n\tconst visitedNodesInOrder = [];\n\tstartNode.distance = 0;\n\tconst unvisitedNodes = getAllNodes(grid);\n\twhile (!!unvisitedNodes.length) \n\t{\n\t\tsortNodesByDistance(unvisitedNodes);\n\t\tconst closestNode = unvisitedNodes.shift();\n\t\tif (closestNode.isBarrier) continue;\n\t\tif (closestNode.distance === Infinity) return visitedNodesInOrder;\n\t\tclosestNode.isVisited = true;\n\t\tvisitedNodesInOrder.push(closestNode);\n\t\tif (closestNode === finishNode) return visitedNodesInOrder;\n\t\tupdateUnvisitedNeighbors(closestNode, grid);\n\t}\n}\n\nfunction sortNodesByDistance(unvisitedNodes) \n{\n\tunvisitedNodes.sort((node1, node2) => node1.distance - node2.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) \n{\n\tconst unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\tfor (const neighbor of unvisitedNeighbors) \n\t{\n\t\tneighbor.distance = node.distance + 1;\n\t\tneighbor.previousNode = node;\n\t}\n}\n\nfunction getUnvisitedNeighbors(node, grid) \n{\n\tconst neighbors = [];\n\tconst {col, row} = node;\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\treturn neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) \n{\n\tconst allNodes = [];\n\tfor (const row of grid) \n\t{\n\t\tfor (const node of row) \n\t\t{\n\t\t\tallNodes.push(node);\n\t\t}\n\t}\n\n\treturn allNodes;\n}\n\nexport function getNodesInShortestPath(finishNode) \n{\n\tconst nodesInShortestPath = [];\n\tlet currNode = finishNode;\n\twhile (currNode !== null)\n\t{\n\t\tnodesInShortestPath.unshift(currNode);\n\t\tcurrNode = currNode.previousNode;\n\t}\n\n\treturn nodesInShortestPath;\n}","import React, {Component} from 'react';\nimport Node from './Node/node';\nimport './pathfinder.css';\nimport {dijkstra, getNodesInShortestPath} from '../algorithms/dijkstra';\n\nconst TOTAL_ROW = 30;\nconst TOTAL_COL = 50;\n\nexport default class Pathfinder extends Component\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tmouseIsPressed: false,\n\t\t\tisSelectingStart: false,\n\t\t\tisSelectingEnd: false,\n\t\t\tisSelectingBarrier: true,\n\t\t\tstartNodeRow: -1,\n\t\t\tstartNodeCol: -1,\n\t\t\tendNodeRow: -1,\n\t\t\tendNodeCol: -1\n\t\t};\n\t}\n\n\tcomponentDidMount() \n\t{\n\t\tconst grid = getInitialGrid();\n\t\tthis.setState({grid});\n\t}\n\n\thandleMouseDown(row, col) \n\t{\n\t\tif(!(this.state.isSelectingStart || this.state.isSelectingEnd))\n\t\t{\n\t\t\tconst newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n\t\t\tthis.setState({grid: newGrid, mouseIsPressed: true});\n\t\t}\n\t}\n\n\thandleMouseEnter(row, col) \n\t{\n\t\tif (!this.state.mouseIsPressed) return;\n\t\tif(this.state.isSelectingBarrier)\n\t\t{\n\t\t\tconst newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n\t\t\tthis.setState({grid: newGrid});\n\t\t}\n\t}\n\n\thandleMouseUp() \n\t{\n\t\tthis.setState({mouseIsPressed: false});\n\t}\n\n\thandleNodeClicked(row, col)\n\t{\n\t\tif(this.state.isSelectingStart)\n\t\t{\n\t\t\tconst newGrid = getNewGridWithStartNode(this.state.grid, row, col, this.state.startNodeRow, this.state.startNodeCol);\n\t\t\tthis.setState({isSelectingStart: false, grid: newGrid, startNodeRow: row, startNodeCol: col});\n\t\t}\n\t\telse if (this.state.isSelectingEnd)\n\t\t{\n\t\t\tconst newGrid = getNewGridWithEndNode(this.state.grid, row, col,this.state.endNodeRow, this.state.endNodeCol);\n\t\t\tthis.setState({isSelectingEnd: false, grid: newGrid, endNodeRow: row, endNodeCol: col});\n\t\t}\n\t\t\n\t}\n\n\tanimateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) \n\t{\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) \n\t\t{\n\t\t\tif (i === visitedNodesInOrder.length) \n\t\t\t{\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.animateShortestPath(nodesInShortestPathOrder);\n\t\t\t\t}, 10 * i);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetTimeout(() => {\n\t\t\tconst node = visitedNodesInOrder[i];\n\t\t\tif((node.row !== this.state.startNodeRow || node.col !== this.state.startNodeCol) && (node.col !== this.state.endNodeCol || node.row !== this.state.endNodeRow))\n\t\t\t\t{\n\t\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t\t\t\t'node node-visited';\n\t\t\t\t}\t\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\t\n\tanimateShortestPath(nodesInShortestPathOrder) \n\t{\n\t\tfor (let i = 1; i < nodesInShortestPathOrder.length -1; i++) \n\t\t{\n\t\t\tsetTimeout(() => \n\t\t\t{\n\t\t\t\tconst node = nodesInShortestPathOrder[i];\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t\t'node node-shortest-path';\n\t\t\t}, 50 * i);\n\t\t}\n\t}\n\t\t\n\tvisualizeDijkstra() \n\t{\n\t\tif(this.state.endNodeRow !== -1 && this.state.startNodeRow !== -1)\n\t\t{\n\t\t\tconst {grid} = this.state;\n\t\t\tconst startNode = grid[this.state.startNodeRow][this.state.startNodeCol];\n\t\t\tconst finishNode = grid[this.state.endNodeRow][this.state.endNodeCol];\n\t\t\tconst visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\t\t\tconst nodesInShortestPathOrder = getNodesInShortestPath(finishNode);\n\t\t\tthis.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\t\t}\n\t}\n\n\ttoggleSelectingStart()\n\t{\n\t\tthis.setState({isSelectingStart: true});\n\t}\n\n\ttoggleSelectingEnd()\n\t{\n\t\tthis.setState({isSelectingEnd: true});\n\t}\n\n\ttoggleSelectingBarriers()\n\t{\n\t\tthis.setState({isSelectingBarrier: true});\n\t}\n\n\tclearGrid()\n\t{\n\t\tconst newGrid = this.state.grid.slice();\n\t\tfor(let row = 0; row < TOTAL_ROW; row++)\n\t\t{\n\t\t\tfor(let col = 0; col < TOTAL_COL; col++)\n\t\t\t{\n\t\t\t\tconst oldNode = newGrid[row][col];\n\t\t\t\tconst newNode = {\n\t\t\t\t\t...oldNode,\n\t\t\t\t\tisStart: false,\n\t\t\t\t\tisFinish: false,\n\t\t\t\t\tisBarrier: false,\n\t\t\t\t};\n\t\t\t\tnewGrid[row][col] = newNode;\n\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className = 'node';\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tgrid: newGrid,\n\t\t\tmouseIsPressed: false,\n\t\t\tisSelectingStart: false,\n\t\t\tisSelectingEnd: false,\n\t\t\tisSelectingBarrier: true,\n\t\t\tstartNodeRow: -1,\n\t\t\tstartNodeCol: -1,\n\t\t\tendNodeRow: -1,\n\t\t\tendNodeCol: -1 \n\t\t})\n\t}\n\n\trender() \n\t{\n\t\tconst {grid, mouseIsPressed} = this.state;\n\t\treturn (\n\t\t<>\n\t\t\t<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n\t\t\t\t<a class=\"navbar-brand\">Pathfinding Algorithms Visualizer</a>\n\t\t\t\t<div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\t\t\t\t\t<ul class=\"navbar-nav mr-auto\">\n\t\t\t\t\t\t<li class=\"nav-item dropdown\">\n\t\t\t\t\t\t\t<a class=\"nav-item nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t\t\tSelect Algorithm\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n\t\t\t\t\t\t\t\t<button class=\"btn dropdown-item\" onClick={() => this.visualizeDijkstra()}>\n\t\t\t\t\t\t\t\t\tDijkstra's Algorithm\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class = \"nav-item\">\n\t\t\t\t\t\t\t<button class = \"btn btn-success navbar-btn\" onClick={() => this.toggleSelectingStart()}>Select Start Node</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class = \"nav-item\">\n\t\t\t\t\t\t\t<button class = \"btn btn-danger navbar-btn\" onClick={() => this.toggleSelectingEnd()}>Select End Node</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class = \"nav-item\">\n\t\t\t\t\t\t\t<button class = \"btn btn-dark navbar-btn\" onClick={() => this.clearGrid()}>Clear Grid</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t\t<div className=\"gridContainer\">\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{grid.map((row, rowIdx) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={rowIdx} className = \"node-row\">\n\t\t\t\t\t\t{row.map((node, nodeIdx) => {\n\t\t\t\t\t\t\tconst {row, col, isFinish, isStart, isBarrier} = node;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\trow = {row}\n\t\t\t\t\t\t\t\t\tcol = {col}\n\t\t\t\t\t\t\t\t\tisFinish = {isFinish}\n\t\t\t\t\t\t\t\t\tisStart = {isStart}\n\t\t\t\t\t\t\t\t\tisBarrier = {isBarrier}\n\t\t\t\t\t\t\t\t\tkey = {nodeIdx}\n\t\t\t\t\t\t\t\t\tmouseIsPressed = {mouseIsPressed}\n\t\t\t\t\t\t\t\t\tonMouseDown = {(row, col) => this.handleMouseDown(row, col)}\n\t\t\t\t\t\t\t\t\tonMouseEnter = {(row, col) => this.handleMouseEnter(row, col)}\n\t\t\t\t\t\t\t\t\tonMouseUp = {() => this.handleMouseUp()}\n\t\t\t\t\t\t\t\t\tonMouseClick = {(row, col) => this.handleNodeClicked(row, col)} \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t\t);\n\t}\n}\n\nconst getInitialGrid = () => {\n\tconst grid = [];\n\tfor (let row = 0; row < TOTAL_ROW; row++) \n\t{\n\t\tconst currentRow = [];\n\t\tfor (let col = 0; col < TOTAL_COL; col++) \n\t\t{\n\t\t\tcurrentRow.push(createNode(col, row));\n\t\t}\n\t\tgrid.push(currentRow);\n\t}\n\n\treturn grid;\n};\n\nconst createNode = (col, row) => {\n\treturn {\n\t\tcol,\n\t\trow,\n\t\tisStart: false,\n\t\tisFinish: false,\n\t\tdistance: Infinity,\n\t\tisVisited: false,\n\t\tisBarrier: false,\n\t\tpreviousNode: null,\n\t};\n};\n\nconst getNewGridWithBarrierToggled = (grid, row, col) => {\n\tconst newGrid = grid.slice();\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t\t...node,\n\t\tisBarrier: !node.isBarrier,\n\t};\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col, oldRow, oldCol) => {\n\tconst newGrid = grid.slice();\n\tif(oldRow !== -1)\n\t{\n\t\tconst oldStart = newGrid[oldRow][oldCol];\n\t\tconst cleanOldStart = {\n\t\t\t...oldStart,\n\t\t\tisStart: false,\n\t\t};\n\t\tnewGrid[oldRow][oldCol] = cleanOldStart;\n\t}\n\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t\t...node,\n\t\tisStart: true,\n\t};\n\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n}\n\nconst getNewGridWithEndNode = (grid, row, col, oldRow, oldCol) => {\n\tconst newGrid = grid.slice();\n\tif(oldRow !== -1)\n\t{\n\t\tconst oldFinish = newGrid[oldRow][oldCol];\n\t\tconst cleanOldFinish = {\n\t\t\t...oldFinish,\n\t\t\tisFinish: false,\n\t\t};\n\t\tnewGrid[oldRow][oldCol] = cleanOldFinish;\n\t}\n\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t\t...node,\n\t\tisFinish: true,\n\t};\n\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n}\n","import React from 'react';\nimport './App.css';\n\nimport Pathfinder from './pathfinder/pathfinder';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Pathfinder></Pathfinder>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}