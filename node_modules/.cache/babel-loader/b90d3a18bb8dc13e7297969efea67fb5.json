{"ast":null,"code":"var _jsxFileName = \"/home/aditya2020/my-app/src/pathfinder/pathfinder.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/node';\nimport './pathfinder.css';\nimport { dijkstra, getNodesInShortestPath } from '../algorithms/dijkstra';\nconst TOTAL_ROW = 30;\nconst TOTAL_COL = 50;\nexport default class Pathfinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      isSelectingStart: false,\n      isSelectingEnd: false,\n      isSelectingBarrier: true,\n      startNodeRow: -1,\n      startNodeCol: -1,\n      endNodeRow: -1,\n      endNodeCol: -1\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    if (!(this.state.isSelectingStart || this.state.isSelectingEnd)) {\n      const newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n\n    if (this.state.isSelectingBarrier) {\n      const newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  handleNodeClicked(row, col) {\n    if (this.state.isSelectingStart) {\n      const newGrid = getNewGridWithStartNode(this.state.grid, row, col, this.state.startNodeRow, this.state.startNodeCol);\n      this.setState({\n        isSelectingStart: false,\n        grid: newGrid,\n        startNodeRow: row,\n        startNodeCol: col\n      });\n    } else if (this.state.isSelectingEnd) {\n      const newGrid = getNewGridWithEndNode(this.state.grid, row, col, this.state.endNodeRow, this.state.endNodeCol);\n      this.setState({\n        isSelectingEnd: false,\n        grid: newGrid,\n        endNodeRow: row,\n        endNodeCol: col\n      });\n    }\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (node.row !== this.state.startNodeRow && node.col !== this.state.startNodeCol && node.col !== this.state.endNodeCol && node.row !== this.state.endNodeRow) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    if (this.state.endNodeRow !== -1 && this.state.startNodeRow !== -1) {\n      const {\n        grid\n      } = this.state;\n      const startNode = grid[this.state.startNodeRow][this.state.startNodeCol];\n      const finishNode = grid[this.state.endNodeRow][this.state.endNodeCol];\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPath(finishNode);\n      this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n\n  toggleSelectingStart() {\n    this.setState({\n      isSelectingStart: true\n    });\n  }\n\n  toggleSelectingEnd() {\n    this.setState({\n      isSelectingEnd: true\n    });\n  }\n\n  toggleSelectingBarriers() {\n    this.setState({\n      isSelectingBarrier: true\n    });\n  }\n\n  clearGrid() {\n    const newGrid = this.state.grid.slice();\n\n    for (let row = 0; row < TOTAL_ROW; row++) {\n      for (let col = 0; col < TOTAL_COL; col++) {\n        const oldNode = newGrid[row][col];\n        const newNode = { ...oldNode,\n          isStart: false,\n          isFinish: false,\n          isBarrier: false\n        };\n        newGrid[row][col] = newNode;\n        document.getElementById(`node-${row}-${col}`).className = 'node';\n      }\n    }\n\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: false,\n      isSelectingStart: false,\n      isSelectingEnd: false,\n      isSelectingBarrier: true,\n      startNodeRow: -1,\n      startNodeCol: -1,\n      endNodeRow: -1,\n      endNodeCol: -1\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"nav\", {\n      class: \"navbar navbar-expand-lg navbar-light bg-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"navbar-brand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 5\n      }\n    }, \"Pathfinding Algorithms Visualizer\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"collapse navbar-collapse\",\n      id: \"navbarSupportedContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      class: \"navbar-nav mr-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      class: \"nav-item dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"nav-item nav-link dropdown-toggle\",\n      id: \"navbarDropdown\",\n      role: \"button\",\n      \"data-toggle\": \"dropdown\",\n      \"aria-haspopup\": \"true\",\n      \"aria-expanded\": \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 8\n      }\n    }, \"Select Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropdown-menu\",\n      \"aria-labelledby\": \"navbarDropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn dropdown-item\",\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, \"Dijkstra's Algorithm\"))), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-success navbar-btn\",\n      onClick: () => this.toggleSelectingStart(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 8\n      }\n    }, \"Select Start Node\")), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-danger navbar-btn\",\n      onClick: () => this.toggleSelectingEnd(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 8\n      }\n    }, \"Select End Node\")), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-dark navbar-btn\",\n      onClick: () => this.clearGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 8\n      }\n    }, \"Clear Grid\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gridContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 5\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        className: \"node-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 7\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isBarrier\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          row: row,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isBarrier: isBarrier,\n          key: nodeIdx,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          onMouseClick: (row, col) => this.handleNodeClicked(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 9\n          }\n        });\n      }));\n    }))));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < TOTAL_ROW; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < TOTAL_COL; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: false,\n    isFinish: false,\n    distance: Infinity,\n    isVisited: false,\n    isBarrier: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithBarrierToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isBarrier: !node.isBarrier\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col, oldRow, oldCol) => {\n  const newGrid = grid.slice();\n\n  if (oldRow !== -1) {\n    const oldStart = newGrid[oldRow][oldCol];\n    const cleanOldStart = { ...oldStart,\n      isStart: false\n    };\n    newGrid[oldRow][oldCol] = cleanOldStart;\n  }\n\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStart: true\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithEndNode = (grid, row, col, oldRow, oldCol) => {\n  const newGrid = grid.slice();\n\n  if (oldRow !== -1) {\n    const oldFinish = newGrid[oldRow][oldCol];\n    const cleanOldFinish = { ...oldFinish,\n      isFinish: false\n    };\n    newGrid[oldRow][oldCol] = cleanOldFinish;\n  }\n\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isFinish: true\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/aditya2020/my-app/src/pathfinder/pathfinder.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPath","TOTAL_ROW","TOTAL_COL","Pathfinder","constructor","state","grid","mouseIsPressed","isSelectingStart","isSelectingEnd","isSelectingBarrier","startNodeRow","startNodeCol","endNodeRow","endNodeCol","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithBarrierToggled","handleMouseEnter","handleMouseUp","handleNodeClicked","getNewGridWithStartNode","getNewGridWithEndNode","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","toggleSelectingStart","toggleSelectingEnd","toggleSelectingBarriers","clearGrid","slice","oldNode","newNode","isStart","isFinish","isBarrier","render","map","rowIdx","nodeIdx","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","oldRow","oldCol","oldStart","cleanOldStart","oldFinish","cleanOldFinish"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/node';\nimport './pathfinder.css';\nimport {dijkstra, getNodesInShortestPath} from '../algorithms/dijkstra';\n\nconst TOTAL_ROW = 30;\nconst TOTAL_COL = 50;\n\nexport default class Pathfinder extends Component\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tmouseIsPressed: false,\n\t\t\tisSelectingStart: false,\n\t\t\tisSelectingEnd: false,\n\t\t\tisSelectingBarrier: true,\n\t\t\tstartNodeRow: -1,\n\t\t\tstartNodeCol: -1,\n\t\t\tendNodeRow: -1,\n\t\t\tendNodeCol: -1\n\t\t};\n\t}\n\n\tcomponentDidMount() \n\t{\n\t\tconst grid = getInitialGrid();\n\t\tthis.setState({grid});\n\t}\n\n\thandleMouseDown(row, col) \n\t{\n\t\tif(!(this.state.isSelectingStart || this.state.isSelectingEnd))\n\t\t{\n\t\t\tconst newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n\t\t\tthis.setState({grid: newGrid, mouseIsPressed: true});\n\t\t}\n\t}\n\n\thandleMouseEnter(row, col) \n\t{\n\t\tif (!this.state.mouseIsPressed) return;\n\t\tif(this.state.isSelectingBarrier)\n\t\t{\n\t\t\tconst newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n\t\t\tthis.setState({grid: newGrid});\n\t\t}\n\t}\n\n\thandleMouseUp() \n\t{\n\t\tthis.setState({mouseIsPressed: false});\n\t}\n\n\thandleNodeClicked(row, col)\n\t{\n\t\tif(this.state.isSelectingStart)\n\t\t{\n\t\t\tconst newGrid = getNewGridWithStartNode(this.state.grid, row, col, this.state.startNodeRow, this.state.startNodeCol);\n\t\t\tthis.setState({isSelectingStart: false, grid: newGrid, startNodeRow: row, startNodeCol: col});\n\t\t}\n\t\telse if (this.state.isSelectingEnd)\n\t\t{\n\t\t\tconst newGrid = getNewGridWithEndNode(this.state.grid, row, col,this.state.endNodeRow, this.state.endNodeCol);\n\t\t\tthis.setState({isSelectingEnd: false, grid: newGrid, endNodeRow: row, endNodeCol: col});\n\t\t}\n\t\t\n\t}\n\n\tanimateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) \n\t{\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) \n\t\t{\n\t\t\tif (i === visitedNodesInOrder.length) \n\t\t\t{\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.animateShortestPath(nodesInShortestPathOrder);\n\t\t\t\t}, 10 * i);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetTimeout(() => {\n\t\t\tconst node = visitedNodesInOrder[i];\n\t\t\tif(node.row !== this.state.startNodeRow && node.col !== this.state.startNodeCol && node.col !== this.state.endNodeCol && node.row !== this.state.endNodeRow)\n\t\t\t\t{\n\t\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t\t\t\t'node node-visited';\n\t\t\t\t}\t\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\t\n\tanimateShortestPath(nodesInShortestPathOrder) \n\t{\n\t\tfor (let i = 1; i < nodesInShortestPathOrder.length -1; i++) \n\t\t{\n\t\t\tsetTimeout(() => \n\t\t\t{\n\t\t\t\tconst node = nodesInShortestPathOrder[i];\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t\t'node node-shortest-path';\n\t\t\t}, 50 * i);\n\t\t}\n\t}\n\t\t\n\tvisualizeDijkstra() \n\t{\n\t\tif(this.state.endNodeRow !== -1 && this.state.startNodeRow !== -1)\n\t\t{\n\t\t\tconst {grid} = this.state;\n\t\t\tconst startNode = grid[this.state.startNodeRow][this.state.startNodeCol];\n\t\t\tconst finishNode = grid[this.state.endNodeRow][this.state.endNodeCol];\n\t\t\tconst visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\t\t\tconst nodesInShortestPathOrder = getNodesInShortestPath(finishNode);\n\t\t\tthis.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\t\t}\n\t}\n\n\ttoggleSelectingStart()\n\t{\n\t\tthis.setState({isSelectingStart: true});\n\t}\n\n\ttoggleSelectingEnd()\n\t{\n\t\tthis.setState({isSelectingEnd: true});\n\t}\n\n\ttoggleSelectingBarriers()\n\t{\n\t\tthis.setState({isSelectingBarrier: true});\n\t}\n\n\tclearGrid()\n\t{\n\t\tconst newGrid = this.state.grid.slice();\n\t\tfor(let row = 0; row < TOTAL_ROW; row++)\n\t\t{\n\t\t\tfor(let col = 0; col < TOTAL_COL; col++)\n\t\t\t{\n\t\t\t\tconst oldNode = newGrid[row][col];\n\t\t\t\tconst newNode = {\n\t\t\t\t\t...oldNode,\n\t\t\t\t\tisStart: false,\n\t\t\t\t\tisFinish: false,\n\t\t\t\t\tisBarrier: false,\n\t\t\t\t};\n\t\t\t\tnewGrid[row][col] = newNode;\n\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className = 'node';\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tgrid: newGrid,\n\t\t\tmouseIsPressed: false,\n\t\t\tisSelectingStart: false,\n\t\t\tisSelectingEnd: false,\n\t\t\tisSelectingBarrier: true,\n\t\t\tstartNodeRow: -1,\n\t\t\tstartNodeCol: -1,\n\t\t\tendNodeRow: -1,\n\t\t\tendNodeCol: -1 \n\t\t})\n\t}\n\n\trender() \n\t{\n\t\tconst {grid, mouseIsPressed} = this.state;\n\t\treturn (\n\t\t<>\n\t\t\t<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n\t\t\t\t<a class=\"navbar-brand\">Pathfinding Algorithms Visualizer</a>\n\t\t\t\t<div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\t\t\t\t\t<ul class=\"navbar-nav mr-auto\">\n\t\t\t\t\t\t<li class=\"nav-item dropdown\">\n\t\t\t\t\t\t\t<a class=\"nav-item nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t\t\tSelect Algorithm\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n\t\t\t\t\t\t\t\t<button class=\"btn dropdown-item\" onClick={() => this.visualizeDijkstra()}>\n\t\t\t\t\t\t\t\t\tDijkstra's Algorithm\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class = \"nav-item\">\n\t\t\t\t\t\t\t<button class = \"btn btn-success navbar-btn\" onClick={() => this.toggleSelectingStart()}>Select Start Node</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class = \"nav-item\">\n\t\t\t\t\t\t\t<button class = \"btn btn-danger navbar-btn\" onClick={() => this.toggleSelectingEnd()}>Select End Node</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class = \"nav-item\">\n\t\t\t\t\t\t\t<button class = \"btn btn-dark navbar-btn\" onClick={() => this.clearGrid()}>Clear Grid</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t\t<div className=\"gridContainer\">\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{grid.map((row, rowIdx) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={rowIdx} className = \"node-row\">\n\t\t\t\t\t\t{row.map((node, nodeIdx) => {\n\t\t\t\t\t\t\tconst {row, col, isFinish, isStart, isBarrier} = node;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\trow = {row}\n\t\t\t\t\t\t\t\t\tcol = {col}\n\t\t\t\t\t\t\t\t\tisFinish = {isFinish}\n\t\t\t\t\t\t\t\t\tisStart = {isStart}\n\t\t\t\t\t\t\t\t\tisBarrier = {isBarrier}\n\t\t\t\t\t\t\t\t\tkey = {nodeIdx}\n\t\t\t\t\t\t\t\t\tmouseIsPressed = {mouseIsPressed}\n\t\t\t\t\t\t\t\t\tonMouseDown = {(row, col) => this.handleMouseDown(row, col)}\n\t\t\t\t\t\t\t\t\tonMouseEnter = {(row, col) => this.handleMouseEnter(row, col)}\n\t\t\t\t\t\t\t\t\tonMouseUp = {() => this.handleMouseUp()}\n\t\t\t\t\t\t\t\t\tonMouseClick = {(row, col) => this.handleNodeClicked(row, col)} \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t\t);\n\t}\n}\n\nconst getInitialGrid = () => {\n\tconst grid = [];\n\tfor (let row = 0; row < TOTAL_ROW; row++) \n\t{\n\t\tconst currentRow = [];\n\t\tfor (let col = 0; col < TOTAL_COL; col++) \n\t\t{\n\t\t\tcurrentRow.push(createNode(col, row));\n\t\t}\n\t\tgrid.push(currentRow);\n\t}\n\n\treturn grid;\n};\n\nconst createNode = (col, row) => {\n\treturn {\n\t\tcol,\n\t\trow,\n\t\tisStart: false,\n\t\tisFinish: false,\n\t\tdistance: Infinity,\n\t\tisVisited: false,\n\t\tisBarrier: false,\n\t\tpreviousNode: null,\n\t};\n};\n\nconst getNewGridWithBarrierToggled = (grid, row, col) => {\n\tconst newGrid = grid.slice();\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t\t...node,\n\t\tisBarrier: !node.isBarrier,\n\t};\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col, oldRow, oldCol) => {\n\tconst newGrid = grid.slice();\n\tif(oldRow !== -1)\n\t{\n\t\tconst oldStart = newGrid[oldRow][oldCol];\n\t\tconst cleanOldStart = {\n\t\t\t...oldStart,\n\t\t\tisStart: false,\n\t\t};\n\t\tnewGrid[oldRow][oldCol] = cleanOldStart;\n\t}\n\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t\t...node,\n\t\tisStart: true,\n\t};\n\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n}\n\nconst getNewGridWithEndNode = (grid, row, col, oldRow, oldCol) => {\n\tconst newGrid = grid.slice();\n\tif(oldRow !== -1)\n\t{\n\t\tconst oldFinish = newGrid[oldRow][oldCol];\n\t\tconst cleanOldFinish = {\n\t\t\t...oldFinish,\n\t\t\tisFinish: false,\n\t\t};\n\t\tnewGrid[oldRow][oldCol] = cleanOldFinish;\n\t}\n\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t\t...node,\n\t\tisFinish: true,\n\t};\n\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n}\n"]},"metadata":{},"sourceType":"module"}