{"ast":null,"code":"var _jsxFileName = \"/home/aditya2020/my-app/src/pathfinder/pathfinder.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/node';\nimport './pathfinder.css';\nimport { dijkstra, getNodesInShortestPath } from '../algorithms/dijkstra';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nconst TOTAL_ROW = 20;\nconst TOTAL_COL = 50;\nexport default class Pathfinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      isSelectingStart: false,\n      isSelectingEnd: false,\n      isSelectingBarrier: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  handleNodeClicked(checkForStart = true, col, row) {\n    if (checkForStart) {\n      if (this.state.isSelectingStart) {\n        const newGrid = getNewGridWithStartNode(this.state.grid, row, col);\n        this.setState({\n          isSelectingStart: false,\n          grid: newGrid\n        });\n      }\n    }\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPath(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  toggleSelectingStart() {\n    this.setState({\n      isSelectingStart: true\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"nav\", {\n      class: \"navbar navbar-inverse\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"navbar-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"navbar-brand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, \"Pathfinding algorithms Visualizer\")), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"nav-item dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"nav-link dropdown-toggle\",\n      id: \"navbarDropdown\",\n      role: \"button\",\n      \"data-toggle\": \"dropdown\",\n      \"aria-haspopup\": \"true\",\n      \"aria-expanded\": \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, \"Select Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropdown-menu\",\n      \"aria-labelledby\": \"navbarDropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn dropdown-item\",\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 8\n      }\n    }, \"Dijkstra's Algorithm\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-success\",\n      onClick: () => this.toggleSelectingStart(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, \"Select Start Node\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 4\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 6\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isBarrier\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          row: row,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isBarrier: isBarrier,\n          key: nodeIdx,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          onMouseClick: (row, col) => this.handleNodeClicked(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 7\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < TOTAL_ROW; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < TOTAL_COL; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: false,\n    isFinish: false,\n    distance: Infinity,\n    isVisited: false,\n    isBarrier: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithBarrierToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isBarrier: !node.isBarrier\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStart: true\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/aditya2020/my-app/src/pathfinder/pathfinder.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPath","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","TOTAL_ROW","TOTAL_COL","Pathfinder","constructor","state","grid","mouseIsPressed","isSelectingStart","isSelectingEnd","isSelectingBarrier","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithBarrierToggled","handleMouseEnter","handleMouseUp","handleNodeClicked","checkForStart","getNewGridWithStartNode","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","toggleSelectingStart","render","map","rowIdx","nodeIdx","isFinish","isStart","isBarrier","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/node';\nimport './pathfinder.css';\nimport {dijkstra, getNodesInShortestPath} from '../algorithms/dijkstra';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nconst TOTAL_ROW = 20;\nconst TOTAL_COL = 50;\n\nexport default class Pathfinder extends Component\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tmouseIsPressed: false,\n\t\t\tisSelectingStart: false,\n\t\t\tisSelectingEnd: false,\n\t\t\tisSelectingBarrier: false\n\t\t};\n\t}\n\n\tcomponentDidMount() \n\t{\n\t\tconst grid = getInitialGrid();\n\t\tthis.setState({grid});\n\t}\n\n\thandleMouseDown(row, col) \n\t{\n\t\tconst newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n\t\tthis.setState({grid: newGrid, mouseIsPressed: true});\n\t}\n\n\thandleMouseEnter(row, col) \n\t{\n\t\tif (!this.state.mouseIsPressed) return;\n\t\tconst newGrid = getNewGridWithBarrierToggled(this.state.grid, row, col);\n\t\tthis.setState({grid: newGrid});\n\t}\n\n\thandleMouseUp() \n\t{\n\t\tthis.setState({mouseIsPressed: false});\n\t}\n\n\thandleNodeClicked(checkForStart = true, col, row)\n\t{\n\t\tif(checkForStart)\n\t\t{\n\t\t\tif(this.state.isSelectingStart)\n\t\t\t{\n\t\t\t\tconst newGrid = getNewGridWithStartNode(this.state.grid, row, col);\n\t\t\t\tthis.setState({isSelectingStart: false, grid: newGrid});\n\t\t\t}\n\t\t}\t\n\t}\n\n\tanimateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) \n\t{\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) \n\t\t{\n\t\t\tif (i === visitedNodesInOrder.length) \n\t\t\t{\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.animateShortestPath(nodesInShortestPathOrder);\n\t\t\t\t}, 10 * i);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetTimeout(() => {\n\t\t\tconst node = visitedNodesInOrder[i];\n\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t\t'node node-visited';\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\n\tanimateShortestPath(nodesInShortestPathOrder) \n\t{\n\t\tfor (let i = 0; i < nodesInShortestPathOrder.length; i++) \n\t\t{\n\t\t\tsetTimeout(() => \n\t\t\t{\n\t\t\t\tconst node = nodesInShortestPathOrder[i];\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t\t\t'node node-shortest-path';\n\t\t\t}, 50 * i);\n\t\t}\n\t}\n\n\tvisualizeDijkstra() \n\t{\n\t\tconst {grid} = this.state;\n\t\tconst startNode = grid[START_NODE_ROW][START_NODE_COL];\n\t\tconst finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\t\tconst visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\t\tconst nodesInShortestPathOrder = getNodesInShortestPath(finishNode);\n\t\tthis.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\t}\n\n\ttoggleSelectingStart()\n\t{\n\t\tthis.setState({isSelectingStart: true});\n\t}\n\n\trender() \n\t{\n\t\tconst {grid, mouseIsPressed} = this.state;\n\t\treturn (\n\t\t<>\n\t\t\t<nav class=\"navbar navbar-inverse\">\n\t\t\t\t<div class=\"container-fluid\">\n\t\t\t\t\t<div class=\"navbar-header\">\n\t\t\t\t\t\t<a class=\"navbar-brand\">Pathfinding algorithms Visualizer</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<li class=\"nav-item dropdown\">\n\t\t\t\t\t\t<a class=\"nav-link dropdown-toggle\"id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t\tSelect Algorithm\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n\t\t\t\t\t\t\t<button class=\"btn dropdown-item\" onClick={() => this.visualizeDijkstra()}>Dijkstra's Algorithm</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<div><button class = \"btn btn-success\" onClick={() => this.toggleSelectingStart()}>Select Start Node</button></div>  \n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t\t<div className=\"grid\">\n\t\t\t\t{grid.map((row, rowIdx) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={rowIdx}>\n\t\t\t\t\t{row.map((node, nodeIdx) => {\n\t\t\t\t\t\tconst {row, col, isFinish, isStart, isBarrier} = node;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\trow = {row}\n\t\t\t\t\t\t\tcol = {col}\n\t\t\t\t\t\t\tisFinish = {isFinish}\n\t\t\t\t\t\t\tisStart = {isStart}\n\t\t\t\t\t\t\tisBarrier = {isBarrier}\n\t\t\t\t\t\t\tkey = {nodeIdx}\n\t\t\t\t\t\t\tmouseIsPressed = {mouseIsPressed}\n\t\t\t\t\t\t\tonMouseDown = {(row, col) => this.handleMouseDown(row, col)}\n\t\t\t\t\t\t\tonMouseEnter = {(row, col) => this.handleMouseEnter(row, col)}\n\t\t\t\t\t\t\tonMouseUp = {() => this.handleMouseUp()}\n\t\t\t\t\t\t\tonMouseClick = {(row, col) => this.handleNodeClicked(row, col)} \n\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</>\n\t  );\n\t}\n}\n\n\tconst getInitialGrid = () => {\n\t\tconst grid = [];\n\t\tfor (let row = 0; row < TOTAL_ROW; row++) \n\t\t{\n\t\t\tconst currentRow = [];\n\t\t\tfor (let col = 0; col < TOTAL_COL; col++) \n\t\t\t{\n\t\t\t\tcurrentRow.push(createNode(col, row));\n\t\t\t}\n\t\t\tgrid.push(currentRow);\n\t\t}\n\n\t\treturn grid;\n\t};\n\n\tconst createNode = (col, row) => {\n\t\treturn {\n\t\tcol,\n\t\trow,\n\t\tisStart: false,\n\t\tisFinish: false,\n\t\tdistance: Infinity,\n\t\tisVisited: false,\n\t\tisBarrier: false,\n\t\tpreviousNode: null,\n\t\t};\n\t};\n\n\tconst getNewGridWithBarrierToggled = (grid, row, col) => {\n\t\tconst newGrid = grid.slice();\n\t\tconst node = newGrid[row][col];\n\t\tconst newNode = {\n\t\t...node,\n\t\tisBarrier: !node.isBarrier,\n\t\t};\n\t\tnewGrid[row][col] = newNode;\n\t\treturn newGrid;\n\t};\n\n\tconst getNewGridWithStartNode = (grid, row, col) => {\n\t\tconst newGrid = grid.slice();\n\t\tconst node = newGrid[row][col];\n\t\tconst newNode = {\n\t\t...node,\n\t\tisStart: true,\n\t\t};\n\t\tnewGrid[row][col] = newNode;\n\t\treturn newGrid;\n\t}"]},"metadata":{},"sourceType":"module"}