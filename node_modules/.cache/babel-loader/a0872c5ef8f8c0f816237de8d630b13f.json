{"ast":null,"code":"var _jsxFileName = \"/home/aditya2020/my-app/src/pathfinder/pathfinder.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/node';\nimport './pathfinder.css';\nimport { dijkstra, getNodesInShortestPath } from '../algorithms/dijkstra';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nconst TOTAL_ROW = 20;\nconst TOTAL_COL = 50;\nexport default class Pathfinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPath(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 4\n      }\n    }, \"Visualize Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 4\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 6\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 7\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < TOTAL_ROW; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < TOTAL_COL; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/aditya2020/my-app/src/pathfinder/pathfinder.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPath","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","TOTAL_ROW","TOTAL_COL","Pathfinder","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/node';\nimport './pathfinder.css';\nimport {dijkstra, getNodesInShortestPath} from '../algorithms/dijkstra';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nconst TOTAL_ROW = 20;\nconst TOTAL_COL = 50;\n\nexport default class Pathfinder extends Component\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tmouseIsPressed: false,\n\t\t};\n\t}\n  \n\tcomponentDidMount() \n\t{\n\t\tconst grid = getInitialGrid();\n\t  \tthis.setState({grid});\n\t}\n  \n\thandleMouseDown(row, col) \n\t{\n\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n\t\tthis.setState({grid: newGrid, mouseIsPressed: true});\n\t}\n  \n\thandleMouseEnter(row, col) \n\t{\n\t\tif (!this.state.mouseIsPressed) return;\n\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n\t\tthis.setState({grid: newGrid});\n\t}\n  \n\thandleMouseUp() \n\t{\n\t\tthis.setState({mouseIsPressed: false});\n\t}\n  \n\tanimateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) \n\t{\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\t\t\tif (i === visitedNodesInOrder.length) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.animateShortestPath(nodesInShortestPathOrder);\n\t\t\t}, 10 * i);\n\t\t\treturn;\n\t\t\t}\n\t\t\tsetTimeout(() => {\n\t\t\tconst node = visitedNodesInOrder[i];\n\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t\t'node node-visited';\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n  \n\tanimateShortestPath(nodesInShortestPathOrder) \n\t{\n\t\tfor (let i = 0; i < nodesInShortestPathOrder.length; i++) \n\t\t{\n\t\t\tsetTimeout(() => \n\t\t\t{\n\t\t\tconst node = nodesInShortestPathOrder[i];\n\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t\t'node node-shortest-path';\n\t\t\t}, 50 * i);\n\t\t}\n\t}\n  \n\tvisualizeDijkstra() \n\t{\n\t\tconst {grid} = this.state;\n\t\tconst startNode = grid[START_NODE_ROW][START_NODE_COL];\n\t\tconst finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\t\tconst visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\t\tconst nodesInShortestPathOrder = getNodesInShortestPath(finishNode);\n\t\tthis.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\t}\n  \n\trender() \n\t{\n\t\tconst {grid, mouseIsPressed} = this.state;\n\t\treturn (\n\t\t<>\n\t\t\t<button onClick={() => this.visualizeDijkstra()}>\n\t\t\t\tVisualize Dijkstra's Algorithm\n\t\t  \t</button>\n\t\t\t<div className=\"grid\">\n\t\t\t\t{grid.map((row, rowIdx) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={rowIdx}>\n\t\t\t\t\t{row.map((node, nodeIdx) => {\n\t\t\t\t\t\tconst {row, col, isFinish, isStart, isWall} = node;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\tkey={nodeIdx}\n\t\t\t\t\t\t\tcol={col}\n\t\t\t\t\t\t\tisFinish={isFinish}\n\t\t\t\t\t\t\tisStart={isStart}\n\t\t\t\t\t\t\tisWall={isWall}\n\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\n\t\t\t\t\t\t\tonMouseDown={(row, col) => this.handleMouseDown(row, col)}\n\t\t\t\t\t\t\tonMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n\t\t\t\t\t\t\tonMouseUp={() => this.handleMouseUp()}\n\t\t\t\t\t\t\trow={row}></Node>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</>\n\t  );\n\t}\n}\n\n\tconst getInitialGrid = () => {\n\t\tconst grid = [];\n\t\tfor (let row = 0; row < TOTAL_ROW; row++) \n\t\t{\n\t\t\tconst currentRow = [];\n\t\t\tfor (let col = 0; col < TOTAL_COL; col++) \n\t\t\t{\n\t\t\t\tcurrentRow.push(createNode(col, row));\n\t\t\t}\n\t\t\tgrid.push(currentRow);\n\t\t}\n\n\t\treturn grid;\n\t};\n\n\tconst createNode = (col, row) => {\n\t\treturn {\n\t\tcol,\n\t\trow,\n\t\tisStart: row === START_NODE_ROW && col === START_NODE_COL,\n\t\tisFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n\t\tdistance: Infinity,\n\t\tisVisited: false,\n\t\tisWall: false,\n\t\tpreviousNode: null,\n\t\t};\n\t};\n\n\tconst getNewGridWithWallToggled = (grid, row, col) => {\n\t\tconst newGrid = grid.slice();\n\t\tconst node = newGrid[row][col];\n\t\tconst newNode = {\n\t\t...node,\n\t\tisWall: !node.isWall,\n\t\t};\n\t\tnewGrid[row][col] = newNode;\n\t\treturn newGrid;\n\t};"]},"metadata":{},"sourceType":"module"}