{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isBarrier) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((node1, node2) => node1.distance - node2.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const allNodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      allNodes.push(node);\n    }\n  }\n\n  return allNodes;\n}\n\nexport function getNodesInShortestPath(finishNode) {\n  const nodesInShortestPath = [];\n  let currNode = finishNode;\n\n  while (currNode !== null) {\n    nodesInShortestPath.unshift(currNode);\n    currNode = currNode.previousNode;\n  }\n\n  return nodesInShortestPath;\n}","map":{"version":3,"sources":["/home/aditya2020/my-app/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isBarrier","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","node1","node2","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","filter","allNodes","getNodesInShortestPath","nodesInShortestPath","currNode","unshift"],"mappings":"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","sourcesContent":["export function dijkstra(grid, startNode, finishNode) \n{\n\tconst visitedNodesInOrder = [];\n\tstartNode.distance = 0;\n\tconst unvisitedNodes = getAllNodes(grid);\n\twhile (!!unvisitedNodes.length) \n\t{\n\t\tsortNodesByDistance(unvisitedNodes);\n\t\tconst closestNode = unvisitedNodes.shift();\n\t\tif (closestNode.isBarrier) continue;\n\t\tif (closestNode.distance === Infinity) return visitedNodesInOrder;\n\t\tclosestNode.isVisited = true;\n\t\tvisitedNodesInOrder.push(closestNode);\n\t\tif (closestNode === finishNode) return visitedNodesInOrder;\n\t\tupdateUnvisitedNeighbors(closestNode, grid);\n\t}\n}\n  \nfunction sortNodesByDistance(unvisitedNodes) \n{\n\tunvisitedNodes.sort((node1, node2) => node1.distance - node2.distance);\n}\n  \nfunction updateUnvisitedNeighbors(node, grid) \n{\n\tconst unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\tfor (const neighbor of unvisitedNeighbors) \n\t{\n\t\tneighbor.distance = node.distance + 1;\n\t\tneighbor.previousNode = node;\n\t}\n}\n  \nfunction getUnvisitedNeighbors(node, grid) \n{\n\tconst neighbors = [];\n\tconst {col, row} = node;\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\treturn neighbors.filter(neighbor => !neighbor.isVisited);\n}\n  \nfunction getAllNodes(grid) \n{\n\tconst allNodes = [];\n\tfor (const row of grid) \n\t{\n\t\tfor (const node of row) \n\t\t{\n\t\t\tallNodes.push(node);\n\t  \t}\n\t}\n\treturn allNodes;\n}\n  \nexport function getNodesInShortestPath(finishNode) \n{\n\tconst nodesInShortestPath = [];\n\tlet currNode = finishNode;\n\twhile (currNode !== null)\n\t{\n\t\tnodesInShortestPath.unshift(currNode);\n\t  \tcurrNode = currNode.previousNode;\n\t}\n\t  \n\treturn nodesInShortestPath;\n}"]},"metadata":{},"sourceType":"module"}