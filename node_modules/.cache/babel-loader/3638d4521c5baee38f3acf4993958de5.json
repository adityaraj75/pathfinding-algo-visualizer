{"ast":null,"code":"var _jsxFileName = \"/home/aditya2020/my-app/src/pathfinder/pathfinder.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/node';\nimport './PathfindingVisualizer.css';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class Pathfinder extends Component {\n  constructor() {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }\n    }, \"Visualize Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 5\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 8\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/aditya2020/my-app/src/pathfinder/pathfinder.jsx"],"names":["React","Component","Node","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Pathfinder","constructor","props","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","dijkstra","getNodesInShortestPathOrder","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/node';\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class Pathfinder extends Component\n{\n\tconstructor()\n\t{\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tmouseIsPressed: false,\n\t\t};\n\t}\n  \n\tcomponentDidMount() \n\t{\n\t  const grid = getInitialGrid();\n\t  this.setState({grid});\n\t}\n  \n\thandleMouseDown(row, col) \n\t{\n\t  const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n\t  this.setState({grid: newGrid, mouseIsPressed: true});\n\t}\n  \n\thandleMouseEnter(row, col) \n\t{\n\t  if (!this.state.mouseIsPressed) return;\n\t  const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n\t  this.setState({grid: newGrid});\n\t}\n  \n\thandleMouseUp() \n\t{\n\t  this.setState({mouseIsPressed: false});\n\t}\n  \n\tanimateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) \n\t{\n\t  for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\t\tif (i === visitedNodesInOrder.length) {\n\t\t  setTimeout(() => {\n\t\t\tthis.animateShortestPath(nodesInShortestPathOrder);\n\t\t  }, 10 * i);\n\t\t  return;\n\t\t}\n\t\tsetTimeout(() => {\n\t\t  const node = visitedNodesInOrder[i];\n\t\t  document.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t'node node-visited';\n\t\t}, 10 * i);\n\t  }\n\t}\n  \n\tanimateShortestPath(nodesInShortestPathOrder) \n\t{\n\t  for (let i = 0; i < nodesInShortestPathOrder.length; i++) \n\t  {\n\t\tsetTimeout(() => \n\t\t{\n\t\t  const node = nodesInShortestPathOrder[i];\n\t\t  document.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t'node node-shortest-path';\n\t\t}, 50 * i);\n\t  }\n\t}\n  \n\tvisualizeDijkstra() \n\t{\n\t  const {grid} = this.state;\n\t  const startNode = grid[START_NODE_ROW][START_NODE_COL];\n\t  const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\t  const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\t  const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\t  this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\t}\n  \n\trender() \n\t{\n\t  const {grid, mouseIsPressed} = this.state;\n  \n\t  return (\n\t\t<>\n\t\t  <button onClick={() => this.visualizeDijkstra()}>\n\t\t\tVisualize Dijkstra's Algorithm\n\t\t  </button>\n\t\t  <div className=\"grid\">\n\t\t\t{grid.map((row, rowIdx) => {\n\t\t\t  return (\n\t\t\t\t<div key={rowIdx}>\n\t\t\t\t  {row.map((node, nodeIdx) => {\n\t\t\t\t\tconst {row, col, isFinish, isStart, isWall} = node;\n\t\t\t\t\treturn (\n\t\t\t\t\t  <Node\n\t\t\t\t\t\tkey={nodeIdx}\n\t\t\t\t\t\tcol={col}\n\t\t\t\t\t\tisFinish={isFinish}\n\t\t\t\t\t\tisStart={isStart}\n\t\t\t\t\t\tisWall={isWall}\n\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\n\t\t\t\t\t\tonMouseDown={(row, col) => this.handleMouseDown(row, col)}\n\t\t\t\t\t\tonMouseEnter={(row, col) =>\n\t\t\t\t\t\t  this.handleMouseEnter(row, col)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonMouseUp={() => this.handleMouseUp()}\n\t\t\t\t\t\trow={row}></Node>\n\t\t\t\t\t);\n\t\t\t\t  })}\n\t\t\t\t</div>\n\t\t\t  );\n\t\t\t})}\n\t\t  </div>\n\t\t</>\n\t  );\n\t}\n  }\n  const getInitialGrid = () => {\n\tconst grid = [];\n\tfor (let row = 0; row < 20; row++) {\n\t  const currentRow = [];\n\t  for (let col = 0; col < 50; col++) {\n\t\tcurrentRow.push(createNode(col, row));\n\t  }\n\t  grid.push(currentRow);\n\t}\n\treturn grid;\n  };\n  const createNode = (col, row) => {\n\treturn {\n\t  col,\n\t  row,\n\t  isStart: row === START_NODE_ROW && col === START_NODE_COL,\n\t  isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n\t  distance: Infinity,\n\t  isVisited: false,\n\t  isWall: false,\n\t  previousNode: null,\n\t};\n  };\n  const getNewGridWithWallToggled = (grid, row, col) => {\n\tconst newGrid = grid.slice();\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t  ...node,\n\t  isWall: !node.isWall,\n\t};\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n  };\n\n"]},"metadata":{},"sourceType":"module"}